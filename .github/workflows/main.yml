name: Deployment

on:
  push:
    branches:
      - main
      - master

jobs:
  run-inline-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run deployment script
        run: |
          echo "Running deployment script..."
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version 
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          echo "access key ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "printing caller identity to test aws cli"
          # aws sts get-caller-identity
          echo "installing kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          chmod +x kubectl
          mkdir -p ~/.local/bin
          mv ./kubectl ~/.local/bin/kubectl
          kubectl version --client
          aws eks update-kubeconfig --name devops-task-cluster --region eu-west-2
          kubectl get pods
          img_tag=$(date +"%Y%m%d%H%M%S")
          cd app
          ls -l
          docker build -t task-app:${img_tag} .
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 146366115606.dkr.ecr.eu-west-2.amazonaws.com
          docker tag task-app:latest 146366115606.dkr.ecr.eu-west-2.amazonaws.com/task-app:${img_tag}
          docker tag task-app:latest 146366115606.dkr.ecr.eu-west-2.amazonaws.com/task-app:latest
          docker push 146366115606.dkr.ecr.eu-west-2.amazonaws.com/task-app:${img_tag}
          docker push 146366115606.dkr.ecr.eu-west-2.amazonaws.com/task-app:latest
          docker images
          kubectl set image deployment task-app-deployment task-app=task-app:${img_tag}
          sleep 2
          kubectl rollout restart deployment task-app-deployment
          

          
